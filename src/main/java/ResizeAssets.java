
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import static com.google.gson.internal.bind.TypeAdapters.URL;
import com.tinify.AccountException;
import com.tinify.ClientException;
import com.tinify.ConnectionException;
import com.tinify.Options;
import com.tinify.ServerException;
import com.tinify.Source;
import com.tinify.Tinify;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.text.DefaultCaret;
import javax.swing.text.html.Option;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author admin
 */
public class ResizeAssets extends javax.swing.JFrame {

    /**
     * Creates new form ResizeAssets
     */
    DefaultListModel DML;
    public static ArrayList<File> files;
    public JCheckBox[] arrayCheckBoxResize;
    private String apiKey;
    private String addImageFolderPath;
    private String saveToPath;
    private long isCheck = 0;

    public ResizeAssets() {
        files = new ArrayList<>();
        DML = new DefaultListModel();
        loadSave();
        initComponents();
        jList.setModel(DML);
        jList.setCellRenderer(new FileCellRenderer());
        jList.setTransferHandler(new ListTransferHandler(jList));
        jList.setDragEnabled(true);
        jList.setDropMode(javax.swing.DropMode.INSERT);
        jList.setBorder(new TitledBorder("Selected images"));
        DefaultCaret caret = (DefaultCaret) jTextAreaLog.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        buttonGroup5 = new javax.swing.ButtonGroup();
        buttonGroup6 = new javax.swing.ButtonGroup();
        buttonGroup7 = new javax.swing.ButtonGroup();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        jButtonAdd = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList = new javax.swing.JList<>();
        jTextFieldSavePath = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButtonLoadKey = new javax.swing.JButton();
        jButtonSaveKey = new javax.swing.JButton();
        jButtonGetKey = new javax.swing.JButton();
        jButtonCheckKey = new javax.swing.JButton();
        jTextFieldAPIKey = new javax.swing.JTextField();
        jCheckBoxCompress = new javax.swing.JCheckBox();
        jCheckBoxIphone = new javax.swing.JCheckBox();
        jCheckBoxIpad = new javax.swing.JCheckBox();
        jCheckBoxUniversal = new javax.swing.JCheckBox();
        jCheckBoxIcon = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jButtonOpen = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonAdd.setText("Add Images");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {""};
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList);

        jTextFieldSavePath.setEditable(false);
        if(saveToPath!= null) jTextFieldSavePath.setText(saveToPath);

        jButtonSave.setText("Save to");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonClear.setText("Clear All");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButtonLoadKey.setText("Load API key");
        jButtonLoadKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadKeyActionPerformed(evt);
            }
        });

        jButtonSaveKey.setText("Save API key");
        jButtonSaveKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveKeyActionPerformed(evt);
            }
        });

        jButtonGetKey.setText("Get API key");
        jButtonGetKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetKeyActionPerformed(evt);
            }
        });

        jButtonCheckKey.setText("Check API key");
        jButtonCheckKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCheckKeyActionPerformed(evt);
            }
        });

        jTextFieldAPIKey.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldAPIKey.setToolTipText("Paste your API key here!\nIf you haven't API key, press \"Get API key\".");
        if(apiKey != null) jTextFieldAPIKey.setText(apiKey);
        jTextFieldAPIKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAPIKeyActionPerformed(evt);
            }
        });

        jCheckBoxCompress.setSelected(true);
        if(isCheck >0)
        if(isCheck %10 == 1)
        jCheckBoxCompress.setSelected(true);
        else
        jCheckBoxCompress.setSelected(false);
        jCheckBoxCompress.setText("Only Compress");
        jCheckBoxCompress.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBoxCompressStateChanged(evt);
            }
        });
        jCheckBoxCompress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCompressActionPerformed(evt);
            }
        });
        jCheckBoxCompress.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jCheckBoxCompressPropertyChange(evt);
            }
        });

        jCheckBoxIphone.setText("iPhone");
        if(isCheck >0)
        if(isCheck/10 %10 == 1)
        jCheckBoxIphone.setSelected(true);
        else
        jCheckBoxIphone.setSelected(false);

        jCheckBoxIpad.setText("iPad");
        if(isCheck >0)
        if(isCheck/100 %10 == 1)
        jCheckBoxIpad.setSelected(true);
        else
        jCheckBoxIpad.setSelected(false);
        jCheckBoxIpad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxIpadActionPerformed(evt);
            }
        });

        jCheckBoxUniversal.setText("universal");
        if(isCheck >0)
        if(isCheck/1000 %10 == 1)
        jCheckBoxUniversal.setSelected(true);
        else
        jCheckBoxUniversal.setSelected(false);

        jCheckBoxIcon.setText("icon");
        if(isCheck >0)
        if(isCheck/10000 %10 == 1)
        jCheckBoxIcon.setSelected(true);
        else
        jCheckBoxIcon.setSelected(false);

        jTextAreaLog.setBackground(new java.awt.Color(0, 0, 0));
        jTextAreaLog.setColumns(20);
        jTextAreaLog.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jTextAreaLog.setForeground(new java.awt.Color(255, 255, 255));
        jTextAreaLog.setRows(5);
        jTextAreaLog.setText("Step 1: Press \"Load API Key\" or paste key to API key text field\n            If you don't have API key, press \"Get API Key\" to get it\n");
        jScrollPane2.setViewportView(jTextAreaLog);

        jButtonOpen.setText("Open Output");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2)
                            .addComponent(jButtonStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonSaveKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonLoadKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxCompress, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                            .addComponent(jCheckBoxIphone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxIpad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxUniversal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jTextFieldAPIKey)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButtonGetKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButtonCheckKey, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextFieldSavePath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonOpen))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonLoadKey)
                            .addComponent(jButtonGetKey))
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonSaveKey)
                            .addComponent(jButtonCheckKey)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jTextFieldAPIKey, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxCompress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxIphone)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxIpad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxUniversal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxIcon))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave)
                    .addComponent(jTextFieldSavePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonOpen))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonStart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        fileChooser.setApproveButtonText("Add");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Images", "png", "jpg"));
        if (addImageFolderPath != null) {
            fileChooser.setCurrentDirectory(new File(addImageFolderPath));
        }
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            for (File file : fileChooser.getSelectedFiles()) {
                files.add(file);
                DML.addElement(file);
                this.addImageFolderPath = file.getParent();
            }
            //jList.setModel(DML);
            addLog("Step 3: Select CheckBox to option");
            addLog("Step 4: Press \"Save to\" and choose destination of output file");
        }
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        JFileChooser directionChooser = new JFileChooser();
        if (!files.isEmpty()) {
            directionChooser.setCurrentDirectory(files.get(0));
        }
        directionChooser.setMultiSelectionEnabled(false);
        directionChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (directionChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String text = directionChooser.getSelectedFile().getParent();
            jTextFieldSavePath.setText(text);
            this.saveToPath = text;
            addLog("Final Step: Press \"Start\" now !");
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        DML.removeAllElements();
        files.removeAll(files);
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed

        if (files.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Don't have image", null, JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (jTextFieldSavePath.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Press \"Save to\" first!", null, JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            Tinify.setKey(jTextFieldAPIKey.getText());
            Tinify.validate();
        } catch (java.lang.Exception e) {
            // Validation of API key failed.
            JOptionPane.showMessageDialog(this, "Validation of API key failed\nDetail:" + e.getMessage(), null, JOptionPane.ERROR_MESSAGE);
            //return;
        }
        addLog("Started! Waiting ...");
        Thread t;
        t = new Thread(new Runnable() {
            public void run() {
                try {
                    for (File file : files) {
                        String fileName = file.getName();
                        String fileType = file.getName();
                        int pos = fileName.lastIndexOf(".");
                        if (pos > 0) {
                            fileType = file.getName().substring(pos + 1);
                            fileName = file.getName().substring(0, pos);
                        }
                        pos = fileName.lastIndexOf("@");
                        if (pos > 0) {
                            fileName = file.getName().substring(0, pos);
                        }
                        String sourceFile = file.getAbsolutePath();
                        String detinationFile = null;
                        BufferedImage bimg = null;
                        try {
                            bimg = ImageIO.read(file);
                        } catch (IOException ex) {
                            Logger.getLogger(ResizeAssets.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        int width = bimg.getWidth();
                        int height = bimg.getHeight();
                        Source source = null;
                        String outPath;
                        source = Tinify.fromFile(sourceFile);
                        if (jCheckBoxCompress.isSelected()) {
                            outPath = jTextFieldSavePath.getText() + "/" + file.getName();
                            source.toFile(outPath);
                            addLog("Success " + outPath);
                        }
                        /*-----------------iPhone----------------------*/
                        if (jCheckBoxIphone.isSelected()) {
                            outPath = jTextFieldSavePath.getText() + "/" + fileName + "@3x~iphone." + fileType;
                            source.toFile(outPath);
                            addLog("Success " + outPath);
                            Options optioniPhone2x = new Options()
                                    .with("method", "scale")
                                    .with("width", Math.ceil(width / 3.0) * 2);
                            Source resizedIphone2x = source.resize(optioniPhone2x);
                            outPath = jTextFieldSavePath.getText() + "/" + fileName + "@2x~iphone." + fileType;
                            resizedIphone2x.toFile(outPath);
                            addLog("Success " + outPath);
                            Options optioniPhone1x = new Options()
                                    .with("method", "scale")
                                    .with("width", Math.ceil(width / 3.0));
                            Source resizedIphone1x = source.resize(optioniPhone1x);
                            outPath = jTextFieldSavePath.getText() + "/" + fileName + "~iphone." + fileType;
                            resizedIphone1x.toFile(outPath);
                            addLog("Success " + outPath);
                        }
                        /*-----------------iPad----------------------*/
                        if (jCheckBoxIpad.isSelected()) {
                            outPath = jTextFieldSavePath.getText() + "/" + fileName + "@2x~ipad." + fileType;
                            source.toFile(outPath);
                            addLog("Success " + outPath);
                            Options optioniPad1x = new Options()
                                    .with("method", "scale")
                                    .with("width", Math.ceil(width / 2.));
                            Source resizedIpad1x = source.resize(optioniPad1x);
                            outPath = jTextFieldSavePath.getText() + "/" + fileName + "~ipad." + fileType;
                            resizedIpad1x.toFile(outPath);
                            addLog("Success " + outPath);
                        }
                        /*-----------------universal----------------------*/
                        if (jCheckBoxUniversal.isSelected()) {
                            outPath = jTextFieldSavePath.getText() + "/" + fileName + "@3x." + fileType;
                            source.toFile(outPath);
                            addLog("Success " + outPath);
                            Options optionUnivesal2x = new Options()
                                    .with("method", "scale")
                                    .with("width", Math.ceil(width / 3.0) * 2);
                            Source resizedUniversal2x = source.resize(optionUnivesal2x);
                            outPath = jTextFieldSavePath.getText() + "/" + fileName + "@2x." + fileType;
                            resizedUniversal2x.toFile(outPath);
                            addLog("Success " + outPath);
                            Options optionUniversal1x = new Options()
                                    .with("method", "scale")
                                    .with("width", Math.ceil(width / 3.0));
                            Source resizedUniversal1x = source.resize(optionUniversal1x);
                            outPath = jTextFieldSavePath.getText() + "/" + fileName + "." + fileType;
                            resizedUniversal1x.toFile(outPath);
                            addLog("Success " + outPath);
                        }
                        /*-----------------iCon----------------------*/
                        if (jCheckBoxIcon.isSelected()) {
                            int size[] = {120, 180, 76, 152, 40, 80, 120, 167};
                            String iconName[] = {"Icon-60@2x", "Icon-60@3x", "Icon-76", "Icon-76@2x",
                                "Icon-Small-40", "Icon-Small-40@2x", "Icon-Small-40@3x",
                                "Icon-83.5@2x"};
                            for (int i = 0; i < size.length; i++) {
                                resizeIconWithSource(source, size[i], iconName[i]);
                            }
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Success");
                    addLog("Success All Images");
                    addLog("Don't forget save API key to reuse");
                } catch (ClientException e) {
                    // Check your source image and request options.
                    JOptionPane.showMessageDialog(rootPane, "Check your source image\n" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } catch (ServerException | ConnectionException e) {
                    JOptionPane.showMessageDialog(rootPane, "Check your internet connection\n" + e.getMessage(), "Connection Error", JOptionPane.ERROR_MESSAGE);
                    // Temporary issue with the Tinify API.
                    // A network connection error occurred.
                } catch (AccountException e) {
                    JOptionPane.showMessageDialog(rootPane, "Verify your API key and account limit\n" + e.getMessage(), "API Key Error", JOptionPane.ERROR_MESSAGE);
                    // Verify your API key and account limit.
                } catch (IOException ex) {
                    Logger.getLogger(ResizeAssets.class.getName()).log(Level.SEVERE, null, ex);
                }// Insert some method call here.
            }
        });
        t.start();
        saveSave();
    }//GEN-LAST:event_jButtonStartActionPerformed
    private void resizeIconWithSource(Source source, int width, String name) throws IOException {
        Options option = new Options()
                .with("method", "scale")
                .with("width", width);
        Source resized = source.resize(option);
        String outPath = jTextFieldSavePath.getText() + "/" + name + ".png";
        resized.toFile(outPath);
        addLog("Success " + outPath);
    }

    private void jButtonLoadKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadKeyActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setCurrentDirectory(new File(getSaveFilePath()));
        fileChooser.setApproveButtonText("Load");
        fileChooser.setFileFilter(new FileNameExtensionFilter("API Key Saved File(*.apik) ", "apik"));

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            BufferedReader br = null;
            try {
                String sCurrentLine;
                br = new BufferedReader(new FileReader(file.getAbsolutePath()));
                jTextFieldAPIKey.setText(br.readLine());
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (br != null) {
                        br.close();
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
            addLog("Step 2: Press \"Add Images\" and choose your images");
        }


    }//GEN-LAST:event_jButtonLoadKeyActionPerformed
    private void loadSave() {
        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader = new FileReader(getSaveFilePath());

            // Always wrap FileReader in BufferedReader.
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            this.apiKey = bufferedReader.readLine();
            this.addImageFolderPath = bufferedReader.readLine();
            this.saveToPath = bufferedReader.readLine();
            this.isCheck = Long.parseLong(bufferedReader.readLine());

            // Always close files.
            bufferedReader.close();
        } catch (FileNotFoundException ex) {
            return;
        } catch (IOException ex) {
            return;
        }
    }

    private void saveSave() {
        this.apiKey = jTextFieldAPIKey.getText();
        this.isCheck = 0;
        if (jCheckBoxCompress.isSelected()) {
            isCheck += 1;
        }
        if (jCheckBoxIphone.isSelected()) {
            isCheck += 10;
        }
        if (jCheckBoxIpad.isSelected()) {
            isCheck += 100;
        }
        if (jCheckBoxUniversal.isSelected()) {
            isCheck += 1000;
        }
        if (jCheckBoxIcon.isSelected()) {
            isCheck += 10000;
        }
        try {
            PrintWriter out = new PrintWriter(getSaveFilePath());
            out.println(this.apiKey);
            out.println(this.addImageFolderPath);
            out.println(this.saveToPath);
            out.println(this.isCheck);
            out.close();
        } catch (FileNotFoundException ex) {
            return;
        }
    }
    private void jButtonGetKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetKeyActionPerformed
        gotoWebsite("https://tinypng.com/developers");
    }//GEN-LAST:event_jButtonGetKeyActionPerformed
    public String getSaveFilePath() {
        return System.getProperty("user.home") + File.separator + "Documents" + File.separator + ".resizeassets";
    }

    private void gotoWebsite(String url) {
        try {
            Desktop.getDesktop().browse(new URL(url).toURI());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void jButtonCheckKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCheckKeyActionPerformed
        gotoWebsite("https://tinypng.com/developers/subscription");
    }//GEN-LAST:event_jButtonCheckKeyActionPerformed

    private void addLog(String log) {
        jTextAreaLog.append(log + "\n");
    }

    private String getCurrentJARFilePath() throws URISyntaxException {
        return ResizeAssets.class
                .getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
    }
    private void jButtonSaveKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveKeyActionPerformed
        JFileChooser directionChooser = new JFileChooser();
        directionChooser.setCurrentDirectory(new File(getSaveFilePath()));
        directionChooser.setMultiSelectionEnabled(false);
        //directionChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY)
        directionChooser.setFileFilter(new FileNameExtensionFilter("API Key Saved File(*.apik) ", "apik"));
        if (directionChooser.showSaveDialog(null) == JFileChooser.APPROVE_OPTION) {
            String pathSaveAPIFile = directionChooser.getSelectedFile().getAbsolutePath();
            int pos = pathSaveAPIFile.indexOf(".apik");
            if (pos < 0) {
                pathSaveAPIFile = pathSaveAPIFile + ".apik";
            }
            try (PrintWriter out = new PrintWriter(pathSaveAPIFile)) {
                out.println(jTextFieldAPIKey.getText());

            } catch (FileNotFoundException ex) {
                Logger.getLogger(ResizeAssets.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButtonSaveKeyActionPerformed

    private void jCheckBoxCompressPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jCheckBoxCompressPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxCompressPropertyChange

    private void jCheckBoxCompressStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBoxCompressStateChanged

    }//GEN-LAST:event_jCheckBoxCompressStateChanged

    private void jTextFieldAPIKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAPIKeyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAPIKeyActionPerformed

    private void jCheckBoxCompressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCompressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxCompressActionPerformed

    private void jCheckBoxIpadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxIpadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxIpadActionPerformed

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        try {
            File file = new File(jTextFieldSavePath.getText());
            Desktop.getDesktop().open(file);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButtonOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ResizeAssets.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ResizeAssets().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.ButtonGroup buttonGroup5;
    private javax.swing.ButtonGroup buttonGroup6;
    private javax.swing.ButtonGroup buttonGroup7;
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonCheckKey;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonGetKey;
    private javax.swing.JButton jButtonLoadKey;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSaveKey;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JCheckBox jCheckBoxCompress;
    private javax.swing.JCheckBox jCheckBoxIcon;
    private javax.swing.JCheckBox jCheckBoxIpad;
    private javax.swing.JCheckBox jCheckBoxIphone;
    private javax.swing.JCheckBox jCheckBoxUniversal;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JList<String> jList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextField jTextFieldAPIKey;
    private javax.swing.JTextField jTextFieldSavePath;
    // End of variables declaration//GEN-END:variables
}

class ListTransferHandler extends TransferHandler {

    private JList list;

    ListTransferHandler(JList list) {
        this.list = list;
    }

    @Override
    public boolean canImport(TransferHandler.TransferSupport info) {
        // we only import FileList
        if (!info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
            return false;
        }
        return true;
    }

    @Override
    public boolean importData(TransferHandler.TransferSupport info) {
        if (!info.isDrop()) {
            return false;
        }

        // Check for FileList flavor
        if (!info.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
            displayDropLocation("List doesn't accept a drop of this type.");
            return false;
        }

        // Get the fileList that is being dropped.
        Transferable t = info.getTransferable();
        List<File> data;
        try {
            data = (List<File>) t.getTransferData(DataFlavor.javaFileListFlavor);
        } catch (Exception e) {
            return false;
        }
        DefaultListModel model = (DefaultListModel) list.getModel();
        for (File file : data) {
            FileName fileName = new FileName(file.getAbsolutePath(), '/', '.');
            if (fileName.extension().compareTo("jpg") == 0 || fileName.extension().compareTo("png") == 0) {
                model.addElement(file);
                ResizeAssets.files.add(file);
            } else {
                displayDropLocation("Cannot import folder or different jpg, png type \n" + file.getAbsolutePath());
            }
        }
        return true;
    }

    private void displayDropLocation(String string) {
        ResizeAssets.jTextAreaLog.append("===> " + string + "\n");
    }
}

class FileName {

    private String fullPath;
    private char pathSeparator, extensionSeparator;

    public FileName(String str, char sep, char ext) {
        fullPath = str;
        pathSeparator = sep;
        extensionSeparator = ext;
    }

    public String extension() {
        int dot = fullPath.lastIndexOf(extensionSeparator);
        return fullPath.substring(dot + 1);
    }

    public String filename() { // gets filename without extension
        int dot = fullPath.lastIndexOf(extensionSeparator);
        int sep = fullPath.lastIndexOf(pathSeparator);
        return fullPath.substring(sep + 1, dot);
    }

    public String path() {
        int sep = fullPath.lastIndexOf(pathSeparator);
        return fullPath.substring(0, sep);
    }
}

class FileCellRenderer extends DefaultListCellRenderer {

    public Component getListCellRendererComponent(JList list,
            Object value,
            int index,
            boolean isSelected,
            boolean cellHasFocus) {

        Component c = super.getListCellRendererComponent(
                list, value, index, isSelected, cellHasFocus);

        if (c instanceof JLabel && value instanceof File) {
            JLabel l = (JLabel) c;
            File f = (File) value;
//            l.setIcon(FileSystemView.getFileSystemView().getSystemIcon(f));
            ImageIcon icon = new ImageIcon(f.getAbsolutePath());
            ImageIcon thumbnailIcon = new ImageIcon(getScaledImage(icon.getImage(), 50, 50));
            l.setIcon(thumbnailIcon);
            l.setText(f.getName());
            l.setToolTipText(f.getAbsolutePath());
        }

        return c;
    }

    private Image getScaledImage(Image srcImg, int w, int h) {
        BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resizedImg.createGraphics();

        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(srcImg, 0, 0, w, h, null);
        g2.dispose();

        return resizedImg;
    }
}
